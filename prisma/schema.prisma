// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  categories    Category[]
  rules         Rule[]
  transactions  Transaction[]
  budgets       Budget[]
  savingsGoals  SavingsGoal[]
}

model Account {
  id          String   @id @default(cuid())
  name        String
  type        AccountType
  balance     Float    @default(0)
  currency    String   @default("USD")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Category {
  id        String       @id @default(cuid())
  name      String
  type      CategoryType
  parentId  String?
  isDefault Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Category?    @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children  Category[]   @relation("CategoryHierarchy")
  rules     Rule[]
  transactions Transaction[]
  budgets   Budget[]
}

model Rule {
  id         String     @id @default(cuid())
  matchType  MatchType
  pattern    String
  priority   Int        @default(0)
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          String   @id @default(cuid())
  date        DateTime
  description String
  merchant    String?
  amount      Float
  currency    String   @default("USD")
  isTransfer  Boolean  @default(false)
  tags        String
  notes       String?
  receiptUrl  String?
  externalId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId   String
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
}

model Budget {
  id         String   @id @default(cuid())
  monthKey   String   // Format: YYYY-MM
  amount     Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId, monthKey])
}

model SavingsGoal {
  id           String    @id @default(cuid())
  name         String
  targetAmount Float
  targetDate   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  CASH
  INVESTMENT
}

enum CategoryType {
  SPEND
  SAVE
}

enum MatchType {
  KEYWORD
  MERCHANT
  AMOUNT_RANGE
  ACCOUNT
}
